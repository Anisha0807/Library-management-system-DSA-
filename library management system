#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_BOOKS 100
#define MAX_TITLE_LENGTH 100
#define MAX_AUTHOR_LENGTH 50

typedef struct {
    int id;
    char title[MAX_TITLE_LENGTH];
    char author[MAX_AUTHOR_LENGTH];
    int year;
    int is_available; // 1 for available, 0 for borrowed
} Book;

Book library[MAX_BOOKS];
int book_count = 0;

void display_menu();
void add_book();
void display_books();
void search_book();
void update_book();
void delete_book();
void save_to_file();
void load_from_file();
int get_valid_int_input(const char *prompt);
void clear_input_buffer();

int main() {
    load_from_file();
    
    int choice;
    do {
        display_menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clear_input_buffer();
        
        switch(choice) {
            case 1:
                add_book();
                break;
            case 2:
                display_books();
                break;
            case 3:
                search_book();
                break;
            case 4:
                update_book();
                break;
            case 5:
                delete_book();
                break;
            case 6:
                save_to_file();
                printf("Data saved successfully. Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while(choice != 6);
    
    return 0;
}

void display_menu() {
    printf("\nLibrary Management System\n");
    printf("1. Add a new book\n");
    printf("2. Display all books\n");
    printf("3. Search for a book\n");
    printf("4. Update book details\n");
    printf("5. Delete a book\n");
    printf("6. Exit\n");
}

void add_book() {
    if (book_count >= MAX_BOOKS) {
        printf("Library is full. Cannot add more books.\n");
        return;
    }
    
    Book new_book;
    
    printf("\nEnter book details:\n");
    
    new_book.id = book_count + 1;
    
    printf("Title: ");
    fgets(new_book.title, MAX_TITLE_LENGTH, stdin);
    new_book.title[strcspn(new_book.title, "\n")] = '\0'; // Remove newline
    
    printf("Author: ");
    fgets(new_book.author, MAX_AUTHOR_LENGTH, stdin);
    new_book.author[strcspn(new_book.author, "\n")] = '\0'; // Remove newline
    
    new_book.year = get_valid_int_input("Publication Year: ");
    
    new_book.is_available = 1;
    
    library[book_count++] = new_book;
    
    printf("Book added successfully with ID: %d\n", new_book.id);
}

void display_books() {
    if (book_count == 0) {
        printf("No books in the library.\n");
        return;
    }
    
    printf("\n%-5s %-30s %-20s %-10s %s\n", "ID", "Title", "Author", "Year", "Status");
    printf("-----------------------------------------------------------------\n");
    
    for (int i = 0; i < book_count; i++) {
        printf("%-5d %-30s %-20s %-10d %s\n", 
               library[i].id, 
               library[i].title, 
               library[i].author, 
               library[i].year, 
               library[i].is_available ? "Available" : "Borrowed");
    }
}

void search_book() {
    if (book_count == 0) {
        printf("No books in the library to search.\n");
        return;
    }
    
    int choice;
    printf("\nSearch by:\n");
    printf("1. ID\n");
    printf("2. Title\n");
    printf("3. Author\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);
    clear_input_buffer();
    
    switch(choice) {
        case 1: {
            int id = get_valid_int_input("Enter book ID: ");
            int found = 0;
            
            for (int i = 0; i < book_count; i++) {
                if (library[i].id == id) {
                    printf("\nBook found:\n");
                    printf("ID: %d\n", library[i].id);
                    printf("Title: %s\n", library[i].title);
                    printf("Author: %s\n", library[i].author);
                    printf("Year: %d\n", library[i].year);
                    printf("Status: %s\n", library[i].is_available ? "Available" : "Borrowed");
                    found = 1;
                    break;
                }
            }
            
            if (!found) {
                printf("Book with ID %d not found.\n", id);
            }
            break;
        }
        case 2: {
            char title[MAX_TITLE_LENGTH];
            printf("Enter book title: ");
            fgets(title, MAX_TITLE_LENGTH, stdin);
            title[strcspn(title, "\n")] = '\0';
            
            int found = 0;
            printf("\nSearch results:\n");
            
            for (int i = 0; i < book_count; i++) {
                if (strstr(library[i].title, title) != NULL) {
                    printf("ID: %d, Title: %s, Author: %s, Year: %d, Status: %s\n", 
                           library[i].id, 
                           library[i].title, 
                           library[i].author, 
                           library[i].year,
                           library[i].is_available ? "Available" : "Borrowed");
                    found = 1;
                }
            }
            
            if (!found) {
                printf("No books found with title containing '%s'.\n", title);
            }
            break;
        }
        case 3: {
            char author[MAX_AUTHOR_LENGTH];
            printf("Enter author name: ");
            fgets(author, MAX_AUTHOR_LENGTH, stdin);
            author[strcspn(author, "\n")] = '\0';
            
            int found = 0;
            printf("\nSearch results:\n");
            
            for (int i = 0; i < book_count; i++) {
                if (strstr(library[i].author, author) != NULL) {
                    printf("ID: %d, Title: %s, Author: %s, Year: %d, Status: %s\n", 
                           library[i].id, 
                           library[i].title, 
                           library[i].author, 
                           library[i].year,
                           library[i].is_available ? "Available" : "Borrowed");
                    found = 1;
                }
            }
            
            if (!found) {
                printf("No books found by author '%s'.\n", author);
            }
            break;
        }
        default:
            printf("Invalid choice.\n");
    }
}

void update_book() {
    if (book_count == 0) {
        printf("No books in the library to update.\n");
        return;
    }
    
    int id = get_valid_int_input("Enter the ID of the book to update: ");
    int found = -1;
    
    for (int i = 0; i < book_count; i++) {
        if (library[i].id == id) {
            found = i;
            break;
        }
    }
    
    if (found == -1) {
        printf("Book with ID %d not found.\n", id);
        return;
    }
    
    printf("\nCurrent book details:\n");
    printf("ID: %d\n", library[found].id);
    printf("Title: %s\n", library[found].title);
    printf("Author: %s\n", library[found].author);
    printf("Year: %d\n", library[found].year);
    printf("Status: %s\n", library[found].is_available ? "Available" : "Borrowed");
    
    printf("\nEnter new details (leave blank to keep current value):\n");
    
    char input[MAX_TITLE_LENGTH];
    
    printf("Title [%s]: ", library[found].title);
    fgets(input, MAX_TITLE_LENGTH, stdin);
    input[strcspn(input, "\n")] = '\0';
    if (strlen(input) > 0) {
        strcpy(library[found].title, input);
    }
    
    printf("Author [%s]: ", library[found].author);
    fgets(input, MAX_AUTHOR_LENGTH, stdin);
    input[strcspn(input, "\n")] = '\0';
    if (strlen(input) > 0) {
        strcpy(library[found].author, input);
    }
    
    printf("Year [%d]: ", library[found].year);
    fgets(input, MAX_TITLE_LENGTH, stdin);
    input[strcspn(input, "\n")] = '\0';
    if (strlen(input) > 0) {
        library[found].year = atoi(input);
    }
    
    printf("Status (1 for Available, 0 for Borrowed) [%d]: ", library[found].is_available);
    fgets(input, MAX_TITLE_LENGTH, stdin);
    input[strcspn(input, "\n")] = '\0';
    if (strlen(input) > 0) {
        library[found].is_available = atoi(input) ? 1 : 0;
    }
    
    printf("Book details updated successfully.\n");
}

void delete_book() {
    if (book_count == 0) {
        printf("No books in the library to delete.\n");
        return;
    }
    
    int id = get_valid_int_input("Enter the ID of the book to delete: ");
    int found = -1;
    
    for (int i = 0; i < book_count; i++) {
        if (library[i].id == id) {
            found = i;
            break;
        }
    }
    
    if (found == -1) {
        printf("Book with ID %d not found.\n", id);
        return;
    }
    
    printf("You are about to delete this book:\n");
    printf("ID: %d, Title: %s, Author: %s\n", 
           library[found].id, library[found].title, library[found].author);
    
    printf("Are you sure? (1 for Yes, 0 for No): ");
    int confirm;
    scanf("%d", &confirm);
    clear_input_buffer();
    
    if (confirm == 1) {
        // Shift all books after the found index one position left
        for (int i = found; i < book_count - 1; i++) {
            library[i] = library[i + 1];
        }
        book_count--;
        printf("Book deleted successfully.\n");
    } else {
        printf("Deletion cancelled.\n");
    }
}

void save_to_file() {
    FILE *file = fopen("library.dat", "wb");
    if (file == NULL) {
        printf("Error opening file for writing.\n");
        return;
    }
    
    fwrite(&book_count, sizeof(int), 1, file);
    fwrite(library, sizeof(Book), book_count, file);
    
    fclose(file);
}

void load_from_file() {
    FILE *file = fopen("library.dat", "rb");
    if (file == NULL) {
        printf("No existing data file found. Starting with empty library.\n");
        return;
    }
    
    fread(&book_count, sizeof(int), 1, file);
    fread(library, sizeof(Book), book_count, file);
    
    fclose(file);
}

int get_valid_int_input(const char *prompt) {
    int value;
    char input[20];
    
    while (1) {
        printf("%s", prompt);
        fgets(input, sizeof(input), stdin);
        
        if (sscanf(input, "%d", &value) == 1) {
            return value;
        }
        
        printf("Invalid input. Please enter a valid integer.\n");
    }
}

void clear_input_buffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}
